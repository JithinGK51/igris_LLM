{"task": "code", "instruction": "Write a Python function to reverse a string.", "input": "", "output": "def reverse_string(s):\n    return s[::-1]\n\n# Example usage:\n# print(reverse_string(\"hello\"))  # Output: olleh"}
{"task": "code", "instruction": "Implement bubble sort in C.", "input": "", "output": "void bubbleSort(int arr[], int n) {\n    for (int i = 0; i < n-1; i++) {\n        for (int j = 0; j < n-i-1; j++) {\n            if (arr[j] > arr[j+1]) {\n                int temp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = temp;\n            }\n        }\n    }\n}"}
{"task": "code", "instruction": "Create a JavaScript function to sum array elements.", "input": "", "output": "function sumArray(arr) {\n    return arr.reduce((a, b) => a + b, 0);\n}\n\n// Example usage:\n// console.log(sumArray([1, 2, 3, 4, 5])); // Output: 15"}
{"task": "code", "instruction": "Write a Python class for a simple calculator.", "input": "", "output": "class Calculator:\n    def __init__(self):\n        self.result = 0\n    \n    def add(self, x):\n        self.result += x\n        return self\n    \n    def subtract(self, x):\n        self.result -= x\n        return self\n    \n    def multiply(self, x):\n        self.result *= x\n        return self\n    \n    def divide(self, x):\n        if x != 0:\n            self.result /= x\n        return self\n    \n    def get_result(self):\n        return self.result"}
{"task": "code", "instruction": "Create a C function to find the factorial of a number.", "input": "", "output": "int factorial(int n) {\n    if (n <= 1) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n}\n\n// Example usage:\n// printf(\"%d\", factorial(5)); // Output: 120"}
{"task": "code", "instruction": "Write a Python function to check if a number is prime.", "input": "", "output": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Example usage:\n# print(is_prime(17))  # Output: True\n# print(is_prime(15))  # Output: False"}
{"task": "code", "instruction": "Create a JavaScript function to merge two sorted arrays.", "input": "", "output": "function mergeSortedArrays(arr1, arr2) {\n    let merged = [];\n    let i = 0, j = 0;\n    \n    while (i < arr1.length && j < arr2.length) {\n        if (arr1[i] <= arr2[j]) {\n            merged.push(arr1[i]);\n            i++;\n        } else {\n            merged.push(arr2[j]);\n            j++;\n        }\n    }\n    \n    while (i < arr1.length) {\n        merged.push(arr1[i]);\n        i++;\n    }\n    \n    while (j < arr2.length) {\n        merged.push(arr2[j]);\n        j++;\n    }\n    \n    return merged;\n}"}
{"task": "code", "instruction": "Write a Python function to find the maximum element in a list.", "input": "", "output": "def find_max(lst):\n    if not lst:\n        return None\n    \n    max_val = lst[0]\n    for num in lst[1:]:\n        if num > max_val:\n            max_val = num\n    \n    return max_val\n\n# Example usage:\n# print(find_max([3, 7, 2, 9, 1]))  # Output: 9"}
{"task": "code", "instruction": "Create a C function to implement binary search.", "input": "", "output": "int binarySearch(int arr[], int left, int right, int target) {\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        if (arr[mid] == target) {\n            return mid;\n        }\n        \n        if (arr[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    \n    return -1; // Element not found\n}"}
{"task": "code", "instruction": "Write a Python function to count word frequency in a text.", "input": "", "output": "def count_word_frequency(text):\n    words = text.lower().split()\n    frequency = {}\n    \n    for word in words:\n        # Remove punctuation\n        word = word.strip('.,!?;:')\n        if word:\n            frequency[word] = frequency.get(word, 0) + 1\n    \n    return frequency\n\n# Example usage:\n# result = count_word_frequency(\"Hello world hello\")\n# print(result)  # Output: {'hello': 2, 'world': 1}"}
